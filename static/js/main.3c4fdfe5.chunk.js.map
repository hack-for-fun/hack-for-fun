{"version":3,"sources":["Components/RecipeCard.js","Components/RecipeList.js","Components/RecipeForm.js","Components/PantryApp.js","App.js","serviceWorker.js","index.js"],"names":["RecipeCard","image","title","sourceUrl","missedIngredients","Card","style","width","Img","variant","src","Body","Title","map","ingredient","Text","key","id","original","Link","href","RecipeContainer","styled","div","props","theme","maxWidth","RecipeList","recipes","recipe","index","RecipeForm","addToList","e","updated_items","state","word","items","setState","setIngredients","renderList","removeFromList","i","indexOf","newList","splice","onChange","target","value","className","Button","onClick","Form","Group","controlId","Label","Control","type","placeholder","this","React","Component","PantryApp","useState","setRecipes","ingredients","getAndSetRecipeData","ids","recipesData","recipeTargetURL","fetch","then","response","status","json","data","updatedRecipes","item","matchingRecipe","find","console","log","catch","err","getRecords","a","recipeIDs","ingredientData","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c4fdfe5.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nconst RecipeCard = ({ image, title, sourceUrl, missedIngredients }) => (\n    <Card style={{ width: '18rem' }}>\n        <Card.Img variant=\"top\" src={image} />\n        <Card.Body>\n            <Card.Title>{title}</Card.Title>\n            {missedIngredients.map(ingredient => (\n                <Card.Text key={ingredient.id}>{ingredient.original}</Card.Text>\n            ))}\n            <Card.Link href={sourceUrl}>See Full Recipe</Card.Link>\n        </Card.Body>\n    </Card>\n);\n\nexport default RecipeCard;\n","import React from 'react';\nimport RecipeCard from './RecipeCard';\nimport styled from 'styled-components';\n\nconst RecipeContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    justify-items: space-around;\n    max-width: ${props => props.theme.maxWidth};\n    margin: 40px;\n`;\n\n\nconst RecipeList = ({ recipes }) => (\n    <RecipeContainer>\n        {recipes.map((recipe, index) => (\n            <RecipeCard\n                key={index}\n                image={recipe.image}\n                title={recipe.title}\n                sourceUrl={recipe.sourceUrl}\n                missedIngredients={recipe.missedIngredients}\n            />\n        ))}\n    </RecipeContainer>\n);\n\nexport default RecipeList;\n","import React from 'react';\nimport { Form, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\n\nexport default class RecipeForm extends React.Component {\n  constructor(props) {\n  super();\n  this.state = {\n     word: '',\n     items: [],\n   };\n };\n addToList = (e) => {\n   const updated_items = [this.state.word, ...this.state.items]\n   this.setState({ items: updated_items, word: ''})\n   this.props.setIngredients(updated_items)\n   this.renderList()\n }\n\n removeFromList = (word) => {\n   const i = this.state.items.indexOf(word);\n   const newList = [...this.state.items];\n   newList.splice(i,1);\n   this.setState({items: newList})\n }\n\n onChange = (e) => {\n   this.setState({word: e.target.value});\n }\n\n renderList = () => {\n   return (\n     <div className=\"recipe-container\">\n     <ul className=\"list\">\n       {this.state.items.map((word, index) =>\n         <li className=\"recipe-items\" key={index}>{word} - <Button className=\"delete\" onClick= {() => {this.removeFromList(word) }} > X </Button></li> ) }\n     </ul>\n     </div>\n   );\n }\n\n render() {\n  return (\n        <div className=\"form-wrapper\">\n            <Form>\n                <Form.Group controlId=\"formIngredients\">\n                    <Form.Label className=\"form-header\"> Tell us what you have in your pantry </Form.Label>\n                    <Form.Control className=\"input-bar\" type=\"Text\" placeholder=\"Enter Ingredient\" value={this.state.word} onChange={this.onChange} />\n                    <Button className=\"form-button\" onClick={this.addToList}> Add Ingredient </Button>\n                </Form.Group>\n            </Form>\n            {this.renderList()}\n        </div>\n    );\n  }\n}\n","import React from 'react';\nimport RecipeList from './RecipeList';\nimport RecipeForm from './RecipeForm';\nimport './PantryApp.css';\n\nconst PantryApp = props => {\n    const [recipes, setRecipes] = React.useState([]);\n    // const ingredients = ['apples', 'flour', 'sugar'];\n    const [ingredients, setIngredients] = React.useState([]);\n\n    const getIngredientData = () =>\n        fetch(\n            `https://xgsd7neuahgcwodbo7pxbttar5p5fhm6.apitracker.net/recipes/findByIngredients?ingredients=${ingredients}&number=2&ignorePantry=true&apiKey=443f34e2a79a4b029105534d36eaae12`\n        )\n            .then(response => {\n                if (response.status !== 200) {\n                    console.log('Looks like there was a problem. Status Code: ' + response.status);\n                    return;\n                }\n\n                response.json().then(data => {\n                    const recipeIDs = data.map(item => item.id);\n                    getAndSetRecipeData(recipeIDs, data);\n                });\n            })\n            .catch(err => {\n                console.log('Fetch Error :-S', err);\n            });\n\n    const getAndSetRecipeData = (ids, recipesData) => {\n        const recipeTargetURL = `https://api.spoonacular.com/recipes/informationBulk?ids=${ids}&apiKey=443f34e2a79a4b029105534d36eaae12`;\n\n        fetch(recipeTargetURL)\n            .then(response => {\n                if (response.status !== 200) {\n                    console.log('Looks like there was a problem. Status Code: ' + response.status);\n                    return;\n                }\n\n                response.json().then(data => {\n                    const updatedRecipes = data.map(item => {\n                        const matchingRecipe = recipesData.find(recipe => recipe.id === item.id);\n\n                        if ('undefined' !== matchingRecipe) {\n                            return { ...matchingRecipe, sourceUrl: item.sourceUrl };\n                        }\n                    });\n\n                    setRecipes(updatedRecipes);\n                });\n            })\n            .catch(err => {\n                console.log('Fetch Error :-S', err);\n            });\n    };\n\n    const getRecords = async () => {\n        const ingredientData = await getIngredientData();\n        console.log(\"TCL: getRecords -> ingredientData\", ingredientData)\n        console.log(\"TCL: getRecords -> recipes\", recipes)\n    };\n\n    return (\n        <div className=\"root\">\n        <div className=\"wrappper\">\n            <h1 className=\"header\">Welcome to the Pantry!</h1>\n            {recipes && <RecipeList recipes={recipes} />}\n            <RecipeForm setIngredients={setIngredients}/>\n            <button className=\"button\" type=\"button\" onClick={getRecords}>\n                Get Recipes\n            </button>\n            {/* IngredientsForm */}\n\n            <div className=\"push\"></div>\n        </div>\n\n        <footer>\n            The Pantry 2019 ©.\n        </footer>\n        </div>\n    );\n};\n\nexport default PantryApp;\n","import React from 'react';\nimport './App.css';\nimport PantryApp from './Components/PantryApp';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PantryApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}